// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`PercentField call_onChange_prop 1`] = `
PercentField {
  "changeHandler": [Function],
  "context": Object {},
  "props": Object {
    "id": "formOne_labelOne",
    "label": "Label",
    "name": "percentFormField",
    "onChange": [MockFunction],
    "options": Object {
      "maskconfig": Object {
        "digits": 2,
        "max": 100,
        "min": 0,
      },
    },
    "placeholder": "",
    "value": 100,
  },
  "refs": Object {},
  "setState": [Function],
  "state": null,
  "updater": Updater {
    "_callbacks": Array [],
    "_renderer": ReactShallowRenderer {
      "_context": Object {},
      "_didScheduleRenderPhaseUpdate": false,
      "_dispatcher": Object {
        "readContext": [Function],
        "useCallback": [Function],
        "useContext": [Function],
        "useDebugValue": [Function],
        "useEffect": [Function],
        "useImperativeHandle": [Function],
        "useLayoutEffect": [Function],
        "useMemo": [Function],
        "useReducer": [Function],
        "useRef": [Function],
        "useState": [Function],
      },
      "_element": <PercentField
        id="formOne_labelOne"
        label="Label"
        name="percentFormField"
        onChange={[MockFunction]}
        options={
          Object {
            "maskconfig": Object {
              "digits": 2,
              "max": 100,
              "min": 0,
            },
          }
        }
        placeholder=""
        value={100}
      />,
      "_firstWorkInProgressHook": null,
      "_forcedUpdate": false,
      "_instance": [Circular],
      "_isReRender": false,
      "_newState": null,
      "_numberOfReRenders": 0,
      "_renderPhaseUpdates": null,
      "_rendered": <ForwardRef
        className="c-label-field"
      >
        <Label
          id="formOne_labelOne"
          label="Label"
          name="percentFormField"
          onChange={[MockFunction]}
          options={
            Object {
              "maskconfig": Object {
                "digits": 2,
                "max": 100,
                "min": 0,
              },
            }
          }
          placeholder=""
          value={100}
        />
        <div
          className="d-flex"
        >
          <MaskedInput
            className="c-label-field__input c-label-field__input--icon-suffixed"
            id="formOne_labelOne"
            inputMode="numeric"
            maskconfig={
              Object {
                "digits": 2,
                "max": 100,
                "min": 0,
                "rightAlign": true,
              }
            }
            name="percentFormField"
            onChange={[Function]}
            placeholder=""
            type="text"
            value={100}
          />
          <i
            className="far fa-percent c-label-field__icon c-label-field__icon--append"
          />
        </div>
      </ForwardRef>,
      "_rendering": false,
      "_updater": [Circular],
      "_workInProgressHook": null,
    },
  },
}
`;

exports[`PercentField render_PercentField 1`] = `
PercentField {
  "changeHandler": [Function],
  "context": Object {},
  "props": Object {
    "id": "formOne_labelOne",
    "label": "Label",
    "name": "percentFormField",
    "onChange": [Function],
    "options": Object {
      "maskconfig": Object {
        "digits": 2,
        "max": 100,
        "min": 0,
      },
    },
    "placeholder": "",
  },
  "refs": Object {},
  "setState": [Function],
  "state": null,
  "updater": Updater {
    "_callbacks": Array [],
    "_renderer": ReactShallowRenderer {
      "_context": Object {},
      "_didScheduleRenderPhaseUpdate": false,
      "_dispatcher": Object {
        "readContext": [Function],
        "useCallback": [Function],
        "useContext": [Function],
        "useDebugValue": [Function],
        "useEffect": [Function],
        "useImperativeHandle": [Function],
        "useLayoutEffect": [Function],
        "useMemo": [Function],
        "useReducer": [Function],
        "useRef": [Function],
        "useState": [Function],
      },
      "_element": <PercentField
        id="formOne_labelOne"
        label="Label"
        name="percentFormField"
        onChange={[Function]}
        options={
          Object {
            "maskconfig": Object {
              "digits": 2,
              "max": 100,
              "min": 0,
            },
          }
        }
        placeholder=""
      />,
      "_firstWorkInProgressHook": null,
      "_forcedUpdate": false,
      "_instance": [Circular],
      "_isReRender": false,
      "_newState": null,
      "_numberOfReRenders": 0,
      "_renderPhaseUpdates": null,
      "_rendered": <ForwardRef
        className="c-label-field"
      >
        <Label
          id="formOne_labelOne"
          label="Label"
          name="percentFormField"
          onChange={[Function]}
          options={
            Object {
              "maskconfig": Object {
                "digits": 2,
                "max": 100,
                "min": 0,
              },
            }
          }
          placeholder=""
        />
        <div
          className="d-flex"
        >
          <MaskedInput
            className="c-label-field__input c-label-field__input--icon-suffixed"
            id="formOne_labelOne"
            inputMode="numeric"
            maskconfig={
              Object {
                "digits": 2,
                "max": 100,
                "min": 0,
                "rightAlign": true,
              }
            }
            name="percentFormField"
            onChange={[Function]}
            placeholder=""
            type="text"
            value={0}
          />
          <i
            className="far fa-percent c-label-field__icon c-label-field__icon--append"
          />
        </div>
      </ForwardRef>,
      "_rendering": false,
      "_updater": [Circular],
      "_workInProgressHook": null,
    },
  },
}
`;
